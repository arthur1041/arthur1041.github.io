[{"content":"What is OAuth 2.0 and How It Works Introduction Many applications require users to log in, especially to protect private resources. For example, your profiles on email services, online stores, or social media platforms contain personal information and sensitive data. These applications must ensure that only authorized individuals can access specific information or perform particular actions. Verifying user identity and controlling access to resources is crucial for maintaining security and privacy in any digital environment. This authentication process helps safeguard user data from unauthorized access and potential breaches. How Can it Be Done? To create a secure online environment for user sign-up and login, several essential steps and features must be implemented. These include:\nStoring and retrieving user credentials securely Implementing Two-Factor Authentication (2FA) Applying password hashing and salting techniques Providing secure password recovery mechanisms Verifying user email addresses or phone numbers Enforcing account lockout protocols after multiple failed login attempts Keeping software and libraries updated with the latest security patches Logging and monitoring login attempts for suspicious activity And many additional functionalities\u0026hellip; As you can see, developing and integrating all these features can be a significant task, potentially requiring extensive time and resources, even with a dedicated team.\nFortunately, you can streamline this process by outsourcing these responsibilities to a third-party solution. Outsourcing the Complex Stuff This is where OAuth 2 comes into play. OAuth 2 allows us to delegate all these responsibilities to Oauth providers. Prominent examples of these providers include Google, Keycloak, Microsoft, Facebook, and GitHub.\nThese providers are highly reliable, having undergone extensive testing and validation, making them dependable solutions for managing authentication and authorization. Diving Into the Concept of OAuth 2.0: What It Really Is OAuth 2.0, which stands for \u0026ldquo;Open Authorization,\u0026rdquo; is a standardized protocol developed to enable a website or application to access resources hosted by other web applications on behalf of a user. Introduced in 2012 as a successor to OAuth 1.0, OAuth 2.0 has since become the widely accepted standard for online authorization. This protocol facilitates consented access and imposes restrictions on what actions a client application can perform on resources on behalf of the user, all while ensuring that the user\u0026rsquo;s credentials remain confidential and are never shared.\nDespite the web being the primary platform for OAuth 2.0, the specification also covers how to manage delegated access for a variety of other client types, including browser-based applications, server-side web applications, native or mobile apps, and connected devices.\n→ Key Principles of OAuth 2.0: OAuth 2.0 is an authorization protocol, not an authentication protocol. It is designed primarily to grant access to resources, such as remote APIs or user data, rather than verifying a user\u0026rsquo;s identity.\nNote: The difference between authentication and authorization is as follows: Authentication involves verifying the true identity of a user or entity, while authorization determines the access levels and permissions that a user or entity is granted within a system. In essence, authentication must occur before authorization, as verifying identity is a prerequisite for establishing the appropriate access rights.\nOAuth2.0 employs Access Tokens to manage this access. An Access Token is a data element that signifies the authorization to access resources on behalf of the end-user. While OAuth 2.0 does not prescribe a specific format for these tokens, the JSON Web Token (JWT) format is frequently used in practice. This format allows token issuers to embed information directly within the token. Additionally, for security purposes, Access Tokens can be assigned an expiration date to limit their validity. OAuth 2.0 Roles The OAuth 2.0 authorization process is defined by distinct roles. These roles play a fundamental part in how authorization is managed and executed, and the end-to-end logic of the process relies on them. They are a key concept for understanding how OAuth 2.0 functions.\nLet’s kick things off with the Resource Owner. This is you—the person who owns the resource. Imagine you\u0026rsquo;re trying to access something private protected by a route called /resource:\nWhen you attempt to access this protected resource, you\u0026rsquo;re doing it through a web or mobile application. This application is known as the Client. So, out of the four roles, it plays the Client Role.\nSo, the Resource Owner heads over to the Authorization Server:\nWith the Access Token in hand, the Client can now make a request to the Resource Server to access the resource:\nThe Resource Server checks the validity of the access token since it was signed by the Authorization Server. It can either validate this signature using a public key or shared secret without needing to contact the Authorization Server every time, or it can perform token introspection by reaching out to the Authorization Server\nReferencias: https://youtu.be/68azMcqPpyo?t=508 https://auth0.com/intro-to-iam/what-is-oauth-2 https://www.oauth.com/oauth2-servers/definitions/\n","date":"2024-08-03T00:00:00Z","image":"https://arthcruz.dev/en/posts/what_is_o_auth_2_0_and_how_it_works/images/oauth-post-wallpaper_hu038033e01dca8d2ea249f26f6fb57836_232893_120x120_fill_q75_box_smart1.jpg","permalink":"https://arthcruz.dev/en/posts/what_is_o_auth_2_0_and_how_it_works/","title":"What is OAuth 2.0 and How It Works"},{"content":"Introduction This is the content of my awesome post.\nHello World example in JavaScript console.log(\u0026#39;Hello, world!\u0026#39;) Hello World example in Java public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, world!\u0026#34;) } } $x_1=x 0_1+\\cos \\left(\\theta_1\\right) \\cdot \\frac{a_1 t^2}{2}$\n$x_2=x 0_2+\\cos \\left(\\theta_2\\right) \\cdot \\frac{a_2(t-\\Delta t)^2}{2}$\n$x 0_1+\\cos \\left(\\theta_1\\right) \\cdot \\frac{a_1 t^2}{2}=x 0_2+\\cos \\left(\\theta_2\\right) \\cdot \\frac{a_2(t-\\Delta t)^2}{2}$\n$0=x 0_2+\\cos \\left(\\theta_2\\right) \\cdot \\frac{a_2(t-\\Delta t)^2}{2}-(x 0_1+\\cos \\left(\\theta_1\\right) \\cdot \\frac{a_1 t^2}{2})$\nMy Markdown Document This is an example of a Markdown file with an embedded YouTube video.\nIntroduction Markdown is a lightweight markup language with plain-text formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.\nEmbedding a YouTube Video You can embed a YouTube video within a Markdown file by using HTML tags.\nHere is an embedded YouTube video:\nConclusion As you can see, embedding a YouTube video in a Markdown file is straightforward by using the HTML iframe tag.\n","date":"2024-07-31T00:00:00Z","image":"https://arthcruz.dev/en/posts/hello-world/images/Hello-World-Wallpaper_huedb0a486dd62cac198920c40079d0534_779969_120x120_fill_q75_box_smart1.jpg","permalink":"https://arthcruz.dev/en/posts/hello-world/","title":"Hello World"},{"content":"Introduction This is the content of my awesome post.\nHello World example in JavaScript console.log(\u0026#39;Hello, world!\u0026#39;) Hello World example in Java public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, world!\u0026#34;) } } ","date":"2023-07-31T00:00:00Z","image":"https://arthcruz.dev/en/posts/hello-world-2/images/Hello-World-Wallpaper_huedb0a486dd62cac198920c40079d0534_779969_120x120_fill_q75_box_smart1.jpg","permalink":"https://arthcruz.dev/en/posts/hello-world-2/","title":"Hello World"},{"content":"Introduction This is the content of my awesome post.\nHello World example in JavaScript console.log(\u0026#39;Hello, world!\u0026#39;) Hello World example in Java public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, world!\u0026#34;) } } ","date":"2022-07-31T00:00:00Z","image":"https://arthcruz.dev/en/posts/hello-world-3/images/Hello-World-Wallpaper_huedb0a486dd62cac198920c40079d0534_779969_120x120_fill_q75_box_smart1.jpg","permalink":"https://arthcruz.dev/en/posts/hello-world-3/","title":"Hello World"}]